/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * Generated with the TypeScript template
 * https://github.com/react-native-community/react-native-template-typescript
 *
 * @format
 */

import React from 'react';
import {
  SafeAreaView,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  useColorScheme,
  View,
} from 'react-native';

import {
  Colors,
  DebugInstructions,
  Header,
  LearnMoreLinks,
  ReloadInstructions,
} from 'react-native/Libraries/NewAppScreen';

const Section: React.FC<{
  title: string;
}> = ({children, title}) => {
  const isDarkMode = useColorScheme() === 'dark';
  return (
    <View style={styles.sectionContainer}>
      <Text
        style={[
          styles.sectionTitle,
          {
            color: isDarkMode ? Colors.white : Colors.black,
          },
        ]}>
        {title}
      </Text>
      <Text
        style={[
          styles.sectionDescription,
          {
            color: isDarkMode ? Colors.light : Colors.dark,
          },
        ]}>
        {children}
      </Text>
    </View>
  );
};

const OudeApp = () => {
  const isDarkMode = useColorScheme() === 'dark';

  const backgroundStyle = {
    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,
  };

  return (
    <SafeAreaView style={backgroundStyle}>
      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
      <ScrollView
        contentInsetAdjustmentBehavior="automatic"
        style={backgroundStyle}>
        <Header />
        <View
          style={{
            backgroundColor: isDarkMode ? Colors.black : Colors.white,
          }}>
          <Section title="Step One">
            Edit <Text style={styles.highlight}>App.tsx</Text> to change this
            screen and then come back to see your edits.
          </Section>
          <Section title="See Your Changes">
            <ReloadInstructions />
          </Section>
          <Section title="Debug">
            <DebugInstructions />
          </Section>
          <Section title="Learn More">
            Read the docs to discover what to do next:
          </Section>
          <LearnMoreLinks />
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
  },
  highlight: {
    fontWeight: '700',
  },
});

export default OudeApp;













import React, {useState, useEffect} from 'react';
import {
  Image,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import Voice from '@react-native-voice/voice';

export default function VoiceApp(Props: any, State: any) {
  const [result, setResult] = useState('');

  useEffect(() => {
    Voice.onSpeechStart = onSpeechStartHandler;
    Voice.onSpeechEnd = onSpeechEndHandler;
    Voice.onSpeechResults = onSpeechResultsHandler;

    return () => {
      Voice.destroy().then(Voice.removeAllListeners);
    };
  }, []);

  const onSpeechStartHandler = (e: any) => {
    console.log('Start handler --> ', e);
  };

  const onSpeechEndHandler = (e: any) => {
    console.log('Stop handler --> ', e);
  };

  const onSpeechResultsHandler = (e: any) => {
    const text = e.value[0]
    setResult(text)
    console.log('Ingesproken tekst: ', text)


    // console.log('Speeck result handler', e); //keert een {} met [] items terug.
  };

  const startRecording = async () => {
    try {
      await Voice.start('nl-Be');
      setResult('')

    } catch (error) {
      console.log('Error: ', error);
    }
  };

  const stopRecording = async () => {
    try {
      await Voice.stop();
    } catch (error) {
      console.log('Error: ', error);
    }
  };

  return (
    <View style={[styles.container]}>
      <View>
        <Text style={[styles.headerText]}>Speech recognition</Text>
        <View style={[styles.textInputStyle]}>
          <TextInput
            value={result}
            placeholder="your text"
            style={{flex: 1}}
            onChangeText={text => setResult(text)}
          />
          <TouchableOpacity onPress={startRecording}>
            <Image
              source={{
                uri: 'https://raw.githubusercontent.com/AboutReact/sampleresource/master/microphone.png',
              }}
              style={{width: 24, height: 24}}
            />
          </TouchableOpacity>
        </View>

        <TouchableOpacity
          style={{
            alignSelf: 'center',
            marginTop: 24,
            backgroundColor: 'red',
            padding: 8,
            borderRadius: 4,
          }}
          onPress={stopRecording}>
          <Text style={{color: 'white', fontWeight: 'bold'}}>Stop</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
  },

  headerText: {
    alignSelf: 'center',
    marginVertical: 26,
    fontWeight: 'bold',
    fontSize: 26,
    color: 'black',
  },

  textInputStyle: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    height: 48,
    borderRadius: 20,
    paddingHorizontal: 16,
    backgroundColor: 'white',
    shadowOffset: {width: 0, height: 1},
    shadowRadius: 2,
    elevation: 2,
    shadowOpacity: 0.4,
  },
});




app.tsx
import { NavigationContainer } from "@react-navigation/native";
import React from "react";

import AppStack from "./screens";

export default function App() {
  return (
    <NavigationContainer>
      <AppStack></AppStack>
    </NavigationContainer>
    
  );
}


index.tsx
import React from 'react';
import { createStackNavigator } from "@react-navigation/stack";
import Overview from "./Calendar";
import VoiceApp from "./Voice";

const Stack = createStackNavigator();

const AppStack = () => {
  return (
    <Stack.Navigator>
        <Stack.Screen name='Overview' component={Overview}></Stack.Screen>
        <Stack.Screen name='VoiceApp' component={VoiceApp}></Stack.Screen>
    </Stack.Navigator>
  )
}

export default AppStack;









scrollview in voice.tsx
<View style={[ styles.textInputStyle ]}>
          <TextInput
            value={result}
            placeholder="title"
            style={[ text.large, {paddingRight: 20} ]}
          />
        </View>

        <View style={[ styles.textInputStyle ]}>
          <TextInput
            value={result}
            placeholder="hour"
            style={[ text.large, {paddingRight: 20} ]}
          />
        </View>

        <View style={[ styles.textInputStyle ]}>
          <TextInput
            value={result}
            placeholder="date"
            style={[ text.large, {paddingRight: 20} ]}
          />
        </View>

        <Text 
          style={[ styles.micaInputStyle, text.large, { paddingLeft: 20, textAlignVertical: 'center' } ]}
        >
          Hier komt mica zen tekst
        </Text>  





        if (text.includes('nieuw')) {
      handleVoice('Op welke datum?');
      setAnswer('Op welke datum?')
    } else if (text.includes('januari') || text.includes('februari') || text.includes('maart') || text.includes('april') || text.includes('mei') || text.includes('juni') || text.includes('juli') || text.includes('augustus') || text.includes('september') || text.includes('oktober') || text.includes('november') || text.includes('december')) {
      setAppointment((oldAppointment: Appointment) => {
        oldAppointment.date = text;
        return { ...oldAppointment };
      });
      handleVoice('Om hoe laat?')
      setAnswer('Om hoe laat?')
    } else if (text.includes('uur')) {
      setAppointment((oldAppointment: Appointment) => {
        oldAppointment.hour = text;
        return { ...oldAppointment };
      });
      handleVoice('Wat wil je inplannen?')
      setAnswer('Wat wil je inplannen?')
    } else if (text.includes('project') || text.includes('dokter') || text.includes('restaurant') || text.includes('muziekschool') || text.includes('uitstap')) {
      setAppointment((oldAppointment: Appointment) => {
        oldAppointment.title = text;
        return { ...oldAppointment };
      });
      handleVoice('Wil je nog details toevoegen?');
      setAnswer('Wil je nog details toevoegen?');
    } else if (text.includes('nee') || text.includes('niet nodig') || text.includes('overslaan')) {
      setAppointment((oldAppointment: Appointment) => {
        oldAppointment.description = '';
        return { ...oldAppointment };
      });
      handleVoice('Oke, de afspraak is toegevoegd aan je agenda.');
      setAnswer('Oké, de afspraak is toegevoegd aan je agenda.')

      // postAppointment(appointment);
    } else if (text.includes('ja')) {
      handleVoice('Welke details wil je toevoegen?');
      setAnswer('Welke details wil je toevoegen?');
    } else if (text.includes('documenten') || text.includes('knie') || text.includes('verjaardag') || text.includes('cello') || text.includes('klasconcert') || text.includes('neefje')) {
      setAppointment((oldAppointment: Appointment) => {
        oldAppointment.description = text;
        return { ...oldAppointment };
      });
      handleVoice('Oke, de afspraak is toegevoegd aan je agenda.');
      setAnswer('Oké, de afspraak is toegevoegd aan je agenda.');

      // postAppointment(appointment);
    }